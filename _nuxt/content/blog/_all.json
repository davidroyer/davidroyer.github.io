[
  {
    "title": "Vuex, Firebase, and Authentication",
    "_date": "17 Sept 2017",
    "meta": {
      "index": 0,
      "fileName": "2017-9-17-Vuex-Auth-Firebase.md",
      "section": "/",
      "dirName": "/blog",
      "filePath": "/Users/droyer/Playground-2017/davidroyer.gitpage/content/blog/2017-9-17-Vuex-Auth-Firebase.md"
    },
    "date": "09-17-2017",
    "path": "/2017-9-17-vuex-auth-firebase",
    "permalink": "/2017-9-17-vuex-auth-firebase",
    "anchors": [],
    "body": "<blockquote>\n<p>The power of Firebase and ease of Vue.js</p>\n</blockquote>\n<h2>Heading level 2</h2>\n<p>Lorem ipsum dolor sit amet, <strong>consectetur</strong> adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n<h3>Heading level 3</h3>\n<ul>\n<li>item 1</li>\n<li>item 2</li>\n<li>item 3</li>\n<li>item 4</li>\n</ul>\n"
  },
  {
    "title": "Learning Note of Sed",
    "_date": "5 Oct 2015",
    "meta": {
      "index": 1,
      "fileName": "2015-10-5-Sed-Note.md",
      "section": "/",
      "dirName": "/blog",
      "filePath": "/Users/droyer/Playground-2017/davidroyer.gitpage/content/blog/2015-10-5-Sed-Note.md"
    },
    "date": "09-17-2017",
    "path": "/2015-10-5-sed-note",
    "permalink": "/2015-10-5-sed-note",
    "anchors": [],
    "body": "<blockquote>\n<p>You must be heard the word, <em>on-the-fly</em>, when read some <code>sed</code> guide books. It’s really a very powerful editor tool (we all know). So in this post, I wanna write down something of my journey in learning it.</p>\n</blockquote>\n<h2>The Key of Sed Editor</h2>\n<p>Please remember that the <code>sed</code> editor is a myriad of commands and formats. And here I described some of the basic commands and features, that you can make life easier. Oh! Another thing you should keep in mind is that <code>sed</code> won’t modify the original file, but output to the <strong>STDOUT</strong>.</p>\n<h3>Substitution Command</h3>\n<p>First, let’s see how to replace matching patterns in the test string.</p>\n<pre><code>$ cat a\nthis line is line 0\nthis line is line 1\nthis line is line 2\nthis line is line 3\n$\n$\n$ sed 's/line/row/' a\nthis row is line 0\nthis row is line 1\nthis row is line 2\nthis row is line 3\n</code></pre>\n<p>What result you got? By default, <code>sed</code> only replaces the first occurrence in each line. To make it work on different occurrences of the test, you must use a <em>substitution flag</em>. The syntax like below:</p>\n<pre><code>s/pattern/replacement/flags\n</code></pre>\n<p>There are four options of subtitution flags available (cite from a book :&gt;):</p>\n<ul>\n<li>A number, indicating the pattern occurrence for which new text should be substituted.</li>\n<li>g - Indicates that new text should be substituted for all occurrences of existing text.</li>\n<li>p - Indicated that the contents of the original line should be printed.</li>\n<li>w <em>file</em> - Write the results of the substitution to a file.</li>\n</ul>\n<p>Ok! See some example and you will see it.</p>\n<pre><code>$ sed 's/line/row/2' a\nthis line is row 0\nthis line is row 1\nthis line is row 2\nthis line is row 3\n</code></pre>\n<p>The above we specify a 2 as the substitution flag. Next is for flag <em>g</em>:</p>\n<pre><code>$ sed 's/line/row/g' a\nthis row is row 0\nthis row is row 1\nthis row is row 2\nthis row is row 3\n</code></pre>\n<p>Ha, the left two flags I won’t give example, but you can test them if you like.</p>\n<p>Mention: Substituting pathnames (include forward slash) in a file can get awkward. When you deal with forward slash, you’d have to use backslash to escape it. Like this:</p>\n<pre><code>$ sed 's/\\/bin\\/sh/\\/bin\\/csh/' /etc/passwd\n</code></pre>\n<h3>Using Address</h3>\n<p>By default, <code>sed</code> works on all lines of the text data. If you only want to apply to a specify line, or a range of lines, you must ust <em>line address</em>, like <code>[address]command</code>.</p>\n<p>There are two form of line addressing in the <code>sed</code> editor:</p>\n<ul>\n<li>A numeric range of lines</li>\n<li>A text pattern that filters out a line</li>\n</ul>\n<p>Examples will tell anything.</p>\n<pre><code>$ sed -n '2s/line/row/gp' a\nthis row is row 1\n$\n$ sed -n '2,$s/line/row/gp' a\nthis row is row 1\nthis row is row 2\nthis row is row 3\n</code></pre>\n<p>Here I use <code>-n</code> option with flag p to suppresses output any line that has been modified. And the line number starts from 1, I worry you stay in C/C++. The ‘$’ indicates the end line of file, similar to that in <strong>vim</strong> editor.</p>\n<pre><code>$ sed -n '/1/s/line/row/p' a\nthis row is line 1\n</code></pre>\n<p>The above is for specifying a text pattern that it uses to filter lines for the command.</p>\n<p>Also, if you need use more than one command on an individual line, you can do like this:</p>\n<pre><code>$ sed '[address]{\n\tcommand 1 \n\tcommand 2\n\t...\n\tcommand n}' file\n</code></pre>\n<p>If you’re interested, try it. Here I won’t give any examples.</p>\n<h3>Deleting Lines</h3>\n<p>The <code>delete</code> command is obviously most useful when used in conjunction with a specified address. But be careful, if you forget to include an addressing scheme, all of the lines will be deleted from the stream(don’t worry, no original file)</p>\n<pre><code>$ sed 'd' a     \t--- nothing will output\n$ sed '1,3d' a\nthis line is line \t--- only line 4 left\n$\n$ sed '/3/d; /2/d' \t--- the pattern-matching feature also applies the d command\nthis line is line 0\nthis line is line 1\n$\n</code></pre>\n<p>please think of this syntax: <code>sed '/2/,/5/d' a</code>. What will happen?</p>\n<h3>Inserting and Appending Text</h3>\n<ul>\n<li>The <code>insert</code> command (i) adds a new line before the specified line.</li>\n<li>The <code>append</code> command (a) adds a new line after the specified line.</li>\n</ul>\n<p>The format for doing this is:</p>\n<pre><code>sed '[address]command\\new line' file\t---be careful it is the backslash '\\'\n</code></pre>\n<p>Here we see two simple examples.</p>\n<pre><code>$ sed '1i\\this line is new line' a\t---if you don't specify a address number, another case.\nthis line is new line\nthis line is line 0\n...(ignore)\n$\n$ sed '1a\\this line is new line' a\nthis line is line 0\nthis line is new line\n...(ignore)\n$\n</code></pre>\n<p>You may try to specify a range of address, and see what’s the result!</p>\n<h3>Changing Lines</h3>\n<p>The <code>change</code> command © allows you to change the content of an entire line of text in the data stream.</p>\n<pre><code>$ sed '2c\\this is changed line 1' a\t---Careful! backslash\nthis line is line 0\nthis is changed line 3\nthis line is line 2\nthis line is line 3\n$\n$ sed '/line 1/c\\this is changed line 1' a\n(same output as above)\n</code></pre>\n<p>Mention: If you specified a range of address, it will use specified line to replace all line in the range.</p>\n<h3>The Transform Command</h3>\n<p>The <code>transform</code> command (y) is the only sed editor command that operates on a single character. The format is:</p>\n<pre><code>[address]y/inchars/outchars/\n</code></pre>\n<p>This command performs a one-to-one mapping of the <strong>inchars</strong> and the <strong>outchars</strong> values. A simple example:</p>\n<pre><code>$ sed -n '1y/ /\\t/' a\nthis\tline\tis\tline\t0\nthis line is line 1\n...(ignore)\n</code></pre>\n<p>The command is a global command; that is, it performs the transformation on any character found in the text line automatically, without regard to the occurrence.</p>\n<h3>Printing Revisited</h3>\n<p>There are three commands that also can be used to print information from the data stream:</p>\n<ul>\n<li>The lowercase p command to print a text line</li>\n<li>The equel sign (=) command to print line numbers</li>\n<li>The l (lowercase L) command to list a line</li>\n</ul>\n<p>As before, a example:</p>\n<pre><code>$ sed -n '/line 1/{\np\ns/line/row/p\n}' a\nthis line is line 1\nthis row is line 1\n$\n$ sed -n '/line 1/{=; p}' a\n2\nthis line is line 1\n</code></pre>\n<p>The <code>l</code> command may be useful to transform text type.</p>\n<h3>Using File with sed</h3>\n<p>The <code>w</code> command is used to write lines to a file. The format is:</p>\n<pre><code>[address]w filename\n</code></pre>\n<p>An simple example:</p>\n<pre><code>$ sed '1,2w temp' a &amp;\n$ cat temp\nthis line is line 0\nthis line is line 1\n</code></pre>\n<p>The <code>r</code> command allows you to insert data contained in a separate file. The format is:</p>\n<pre><code>[address]r filename\n</code></pre>\n<p>Also, an simple example:</p>\n<pre><code>$ echo &quot;from another file&quot; &gt; b\n$ sed '/line 0/r b' a\nthis line is line 0\nfrom another file\n...(ignore)\n</code></pre>\n<h2>Summary</h2>\n<p>Nothing to summarize. Keep hungry, keep foolish.</p>\n<blockquote>\n<p>In Shanghai Vortex</p>\n</blockquote>\n"
  }
]